package edu.practise.trip_planner.service.tour;import edu.practise.trip_planner.entities.Place;import edu.practise.trip_planner.entities.Tour;import edu.practise.trip_planner.entities.User;import edu.practise.trip_planner.exceptions.TourNotFoundException;import edu.practise.trip_planner.exceptions.UserNotFoundException;import edu.practise.trip_planner.repository.PlaceRepository;import edu.practise.trip_planner.repository.TourRepository;import edu.practise.trip_planner.repository.UserRepository;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class TourServiceImpl implements TourService {    private final TourRepository tourRepository;    private final UserRepository userRepository;    private final PlaceRepository placeRepository;    public TourServiceImpl(TourRepository tourRepository, UserRepository userRepository, PlaceRepository placeRepository) {        this.tourRepository = tourRepository;        this.userRepository = userRepository;        this.placeRepository = placeRepository;    }    @Override    public Tour addTour(Long userId, Tour tour) {        User user = userRepository                .findById(userId)                .orElseThrow(() -> new UserNotFoundException("The user with id " + userId + " doesn't found"));        List<Place> places = tour.getPlaces();        List<Place> places2 = new ArrayList<>();        places.forEach(place -> places2.add(placeRepository.save(place)));        tour.setPlaces(places2);        List<User> usersForThisTour = tour.getUsers();        usersForThisTour.add(user);        tour.setUsers(usersForThisTour);        return tourRepository.save(tour);    }    @Override    public void deleteTourById(Long id) {        tourRepository.deleteById(id);    }    @Override    public Tour editTourById(Long userId, Long tourId, Tour tour) {        Tour editedTour = tourRepository.findById(tourId).orElseThrow(() -> new TourNotFoundException("The place with id " + tourId + " doesn't found"));        editedTour.setName(tour.getName());        editedTour.setUsers(tour.getUsers());        List<Place> places = tour.getPlaces();        List<Place> places2 = new ArrayList<>();        places.forEach(place -> places2.add(placeRepository.save(place)));        editedTour.setPlaces(places2);        return tourRepository.save(editedTour);    }    @Override    public Tour shareTourWithOtherUser(Long tourId, Long userId) {        Tour editedTour = tourRepository.findById(tourId).orElseThrow(() -> new TourNotFoundException("The tour with id " + tourId + " doesn't found"));        List<User> users = editedTour.getUsers();        users.add(userRepository                .findById(userId)                .orElseThrow(() -> new UserNotFoundException("The user with id " + tourId + " doesn't found")));        editedTour.setUsers(users);        return tourRepository.save(editedTour);    }    @Override    public Tour findTourById(Long id) {        return tourRepository                .findById(id)                .orElseThrow(() -> new TourNotFoundException("The user with id " + id + " doesn't found"));    }    @Override    public List<Tour> findAllTours() {        return tourRepository.findAll();    }}